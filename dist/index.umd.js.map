{"version":3,"file":"index.umd.js","sources":["../src/entity-manager-mongodb.js","../src/index.js"],"sourcesContent":["/*\nEntityManager 类，用于生成一个通用的管理Entity的类。\n */\n/*\neslint-disable no-console\n */\nimport { useCollection } from 'mongo-use-collection'; // eslint-disable-line import/no-unresolved\nimport { MongoClient, GridStore } from 'mongodb';\nimport debug from 'debug';\n\nconst info = debug('entity-manager:info');\nconst error = debug('entity-manager:error');\nexport default class EntityManager {\n  /**\n   * 构造函数\n   * @param  {String} collectionName Entity使用的集合的名称\n   * @param  {String} mongoUrl       所使用的数据库的连接字符串\n   */\n  constructor(mongoUrl, collectionName) {\n    this.collectionName = collectionName;\n    this.mongoUrl = mongoUrl;\n    this.useEntity = cb => useCollection(mongoUrl, collectionName, cb);\n  }\n\n  /**\n   *\n   * 插入实体对象到数据库中\n   * @param  {Object} entityData 实体对象数据\n   * @return {Promise}            操作结果\n   */\n  insert(entityData) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      let result;\n      try {\n        result = await col.insertOne(entityData);\n        resolve(result);\n      } catch (e) {\n        console.log('EntityManager Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n\n/**\n * 查询实体对象\n * @param  {Object} query =             {}  查询条件\n * @param  {Number} limit =             100 查询结果限制\n * @param  {number} skip  =             0   跳过开头的结果\n * @return {Promise}       操作结果\n */\n  find({ query = {}, limit = 100, skip = 0 } = { query: {}, limit: 100, skip: 0 }) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      let result;\n      try {\n        info(`[${col.collectionName}]query::`, query);\n        info('limit:', limit);\n        info('skip:', skip);\n        const cursor = col.find(query).skip(skip).limit(limit);\n        result = await cursor.toArray();\n        info(`[${col.collectionName}]result count::${result.length}`);\n        return resolve(result);\n      } catch (e) {\n        error(e.message, e.stack);\n        return reject(e);\n      }\n    }));\n  }\n\n  count(query = {}) {\n    console.log('[EntityManager count]query::', JSON.stringify(query));\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        const result = await col.count(query);\n        console.log('[EntityManager count]result::', result);\n        resolve(result);\n      } catch (e) {\n        console.log('[EntityManager count]Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n\n  findOne(query = {}) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        const result = await col.findOne(query);\n        resolve(result);\n      } catch (e) {\n        console.log('[EntityManager findOne]Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n\n  findById(_id) {\n    return this.findOne({ _id });\n  }\n\n  removeById(_id) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        const result = await col.remove({ _id }, { single: true });\n        resolve(result);\n      } catch (e) {\n        console.log('[EntityManager removeById]Error: ', e); // eslint-disable-line no-console\n        reject(e);\n      }\n    }));\n  }\n\n  updateById(_id, updateQuery, options) {\n    return this.update({ _id }, updateQuery, options);\n  }\n\n  update(condition, updateQuery, options = {}) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        const result = await col.update(condition, updateQuery, options);\n        resolve(result);\n      } catch (error) {\n        reject({\n          error,\n          condition,\n          updateQuery,\n          options,\n        });\n      }\n    }));\n  }\n\n  aggregate(pipeline, options) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        const cursor = col.aggregate(pipeline, options);\n        const result = await cursor.toArray();\n        resolve(result);\n      } catch (e) {\n        reject(e);\n      }\n    }));\n  }\n\n\n  group(keys, condition, initial, reduce, finalize, command, options) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        // http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#group\n        const result = await col.group(keys, condition, initial,\n          reduce, finalize, command, options);\n        resolve(result);\n      } catch (e) {\n        reject(e);\n      }\n    }));\n  }\n\n  mapReduce(map, reduce, options) {\n    return new Promise((resolve, reject) => this.useEntity(async col => {\n      try {\n        const result = await col.mapReduce(map, reduce, options);\n        resolve(result);\n      } catch (e) {\n        reject(e);\n      }\n    }));\n  }\n\n  async writeFile(data, fileId, filename, options = null) {\n    try {\n      // 连接数据库\n      const db = await MongoClient.connect(this.mongoUrl);\n\n      // 创建一个新文件用于写入\n      // http://mongodb.github.io/node-mongodb-native/2.2/api/GridStore.html\n      const gs = new GridStore(db, fileId, filename, 'w', options);\n\n      // 打开文件\n      await gs.open();\n\n      // 写入Buffer\n      await gs.write(data);\n\n      // 关闭文件\n      await gs.close();\n\n      await db.close();\n\n      // 返回文件Id\n      return fileId;\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async readFile(fileId) {\n    try {\n    // 连接数据库\n      const db = await MongoClient.connect(this.mongoUrl);\n      const file = await GridStore.read(db, fileId);\n      await db.close();\n\n      // 返回文件Buffer\n      return file;\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async removeFile(fileId) {\n    try {\n    // 连接数据库\n      const db = await MongoClient.connect(this.mongoUrl);\n      await GridStore.unlink(db, fileId);\n      await db.close();\n    } catch (e) {\n      throw e;\n    }\n  }\n}\n","import EntityManagerMongoDB from './entity-manager-mongodb';\n\n\nconst EntityManager = EntityManagerMongoDB;\n\nexport {\n  EntityManagerMongoDB,\n};\n\nexport default EntityManager;\n"],"names":["info","debug","error","EntityManager","mongoUrl","collectionName","useEntity","useCollection","cb","entityData","resolve","reject","col","result","insertOne","console","log","query","limit","skip","cursor","find","toArray","length","message","stack","count","findOne","_id","remove","single","updateQuery","options","update","condition","pipeline","aggregate","keys","initial","reduce","finalize","command","group","map","mapReduce","data","fileId","filename","MongoClient","connect","db","gs","GridStore","open","write","close","read","file","unlink","EntityManagerMongoDB"],"mappings":"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"}